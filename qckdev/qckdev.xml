<?xml version="1.0"?>
<doc>
    <assembly>
        <name>qckdev</name>
    </assembly>
    <members>
        <member name="T:qckdev.AppDomainWrapper">
            <summary>
            Wraps <see cref="T:System.AppDomain"/> object for <see cref="T:System.IDisposable"/> implementation.
            </summary>
        </member>
        <member name="M:qckdev.AppDomainWrapper.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:qckdev.AppDomainWrapper"/> class.
            </summary>
            <param name="appDomain">The application domain wrapped in this <see cref="T:qckdev.AppDomainWrapper"/>.</param>
        </member>
        <member name="P:qckdev.AppDomainWrapper.IsDisposed">
            <summary>
            Gets a value indicating whether the <see cref="P:qckdev.AppDomainWrapper.AppDomain"/> has been unloaded.
            </summary>
        </member>
        <member name="P:qckdev.AppDomainWrapper.AppDomain">
            <summary>
            Gets the application domain wrapped in this <see cref="T:qckdev.AppDomainWrapper"/>.
            </summary>
        </member>
        <member name="M:qckdev.AppDomainWrapper.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Dispose managed state (managed objects).</param>
        </member>
        <member name="M:qckdev.AppDomainWrapper.Finalize">
            <summary>
            Releases all resources used by the <see cref="T:qckdev.AppDomainWrapper"/>.
            </summary>
        </member>
        <member name="M:qckdev.AppDomainWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:qckdev.CommandArgsDictionary">
            <summary>
            Provides a dictionary with all command arguments.
            </summary>
            <remarks>
            Format: "/Param1:Value /Param2 /Param3:Value".
            </remarks>
        </member>
        <member name="M:qckdev.CommandArgsDictionary.Create(System.String[])">
            <summary>
            Returns a <see cref="T:qckdev.CommandArgsDictionary"/> with the information splitted. In uppercase.
            </summary>
            <param name="args">Command arguments.</param>
            <returns>A <see cref="T:qckdev.CommandArgsDictionary"/> with the information splitted.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:qckdev.CommandArgsDictionary.Create(System.Boolean,System.String[])">
            <summary>
            Returns a <see cref="T:qckdev.CommandArgsDictionary"/> with the information splitted.
            </summary>
            <param name="ignoreCase">
            Performs a case-insensitive string comparison using the word comparison rules of the invariant culture.
            </param>
            <param name="args">Command arguments.</param>
            <returns>A <see cref="T:qckdev.CommandArgsDictionary"/> with the information splitted.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:qckdev.ComponentModel.PropertyDescriptorCache.Cache(System.Type)">
            <summary>
            Returns the collection of properties for a specified type of component.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> that represents the component to get properties for.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties for a specified type of component.
            </returns>
        </member>
        <member name="T:qckdev.ComponentModel.TypeDescriptorHelper">
            <summary>
            Provides information about the characteristics for a component, such as its attributes, properties, and events. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:qckdev.ComponentModel.TypeDescriptorHelper.GetCachedPropertyDescriptors(System.Type)">
            <summary>
            Returns the collection of properties for a specified type of component.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> that represents the component to get properties for.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties for a specified type of component.
            </returns>
        </member>
        <member name="M:qckdev.ComponentModel.TypeDescriptorHelper.GetPropertiesFull(System.Type)">
            <summary>
            Returns the collection of properties for a specified type of component.
            Includes all levels for interfaces.
            </summary>
            <param name="componentType">A <see cref="T:System.Type"/> that represents the component to get properties for.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties for a specified type of component.</returns>
        </member>
        <member name="F:qckdev.Data.CommandHelper.TypeMap">
            <remarks>
            <seealso href="https://stackoverflow.com/questions/7952142/how-to-resolve-system-type-to-system-data-dbtype"/>
            </remarks>
        </member>
        <member name="M:qckdev.Data.CommandHelper.GetDbType(System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> to an equivalent <see cref="T:System.Data.DbType"/> value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to convert.</param>
            <returns>
            A <see cref="T:System.Data.DbType"/> value that is equivalent to the specified <paramref name="type"/> 
            or <see cref="F:System.Data.DbType.Object"/> if no equivalent is found.
            </returns>
            <remarks>
            <seealso href="https://stackoverflow.com/questions/7952142/how-to-resolve-system-type-to-system-data-dbtype"/>
            </remarks>
        </member>
        <member name="T:qckdev.Data.DataExtensions">
            <summary>
            Defines the extension methods to the <see cref="N:System.Data"/> namespace.
            </summary>
        </member>
        <member name="M:qckdev.Data.DataExtensions.Clone``1(``0)">
            <summary>
            Creates a new connection that is a copy of the current instance.
            </summary>
            <param name="connection">The connection to clone.</param>
            <returns>A new connection that is a copy of this instance.</returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteNonQueryAuto(System.Data.IDbCommand)">
            <summary>
            Executes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.
            If the connection is closed, it is automatically opened and closed. Otherwise the connection status does not change.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.InvalidOperationException">The connection does not exist. -or- The connection is not open.</exception>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteScalar``1(System.Data.IDbCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <typeparam name="T">The returned value type.</typeparam>
            <param name="command">The command to execute.</param>
            <returns>
            The first column of the first row in the resultset converted to <typeparamref name="T"/> type. 
            When the result is <see cref="F:System.DBNull.Value"/>, it is converted to null.
            </returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteScalarAuto(System.Data.IDbCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            If the connection is closed, it is automatically opened and closed. Otherwise the connection status does not change.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteScalarAuto``1(System.Data.IDbCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            If the connection is closed, it is automatically opened and closed. Otherwise the connection status does not change.
            </summary>
            <typeparam name="T">The returned value type.</typeparam>
            <param name="command">The command to execute.</param>
            <returns>
            The first column of the first row in the resultset converted to <typeparamref name="T"/> type. 
            When the result is <see cref="F:System.DBNull.Value"/>, it is converted to null.
            </returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteReaderAuto(System.Data.IDbCommand)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"/> against the <see cref="P:System.Data.IDbCommand.Connection"/> 
            and builds an <see cref="T:System.Data.IDataReader"/>.
            If the connection is closed, it is automatically opened and closed. Otherwise the connection status does not change.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.ExecuteReaderAuto(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"/> against the <see cref="P:System.Data.IDbCommand.Connection"/>, 
            and builds an <see cref="T:System.Data.IDataReader"/> using one of the <see cref="T:System.Data.CommandBehavior"/> values.
            If the connection is closed, it is automatically opened and closed. Otherwise the connection status does not change.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.CreateParameterWithValue``1(System.Data.IDbCommand,System.String,``0)">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter"/> object.
            </summary>
            <typeparam name="TValue">Value type of the parameter.</typeparam>
            <param name="command"></param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added. If the value is null, it sends a <see cref="F:System.DBNull.Value"/>.</param>
            <returns>A <see cref="T:System.Data.IDbDataParameter"/> object.</returns>
        </member>
        <member name="M:qckdev.Data.DataExtensions.CreateParameterWithValue``1(System.Data.IDbCommand,System.String,``0,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter"/> object.
            </summary>
            <typeparam name="TValue">Value type of the parameter.</typeparam>
            <param name="command"></param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added. If the value is null, it sends a <see cref="F:System.DBNull.Value"/>.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
            <returns>A <see cref="T:System.Data.IDbDataParameter"/> object.</returns>
        </member>
        <member name="T:qckdev.Extensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods.
            </summary>
        </member>
        <member name="M:qckdev.Extensions.Substring(System.String,System.String,System.String)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character and end at other specified character.
            </summary>
            <param name="value">The string to test.</param>
            <param name="start">The starting character.</param>
            <param name="end">The ending character.</param>
            <returns>
            A <see cref="T:System.String"/> equivalent to the substring that begins and ends at a specified characters.
            or the original <paramref name="value"/> if it does not contains starts and ends characters.
            </returns>
        </member>
        <member name="M:qckdev.Extensions.In``1(``0,``0[])">
            <summary>
            Determines whether a specified value matches any value in a a list.
            </summary>
            <typeparam name="T">The type of elements to validate.</typeparam>
            <param name="this">Value to validate.</param>
            <param name="values">List of values to compare.</param>
            <returns>Returns true if one of list values matches with the specified value.</returns>
        </member>
        <member name="M:qckdev.Extensions.In(System.String,System.Boolean,System.String[])">
            <summary>
            Determines whether a specified value matches any value in a a list.
            </summary>
            <param name="this">Value to validate.</param>
            <param name="ignoreCase">Ignores case sensitive.</param>
            <param name="values">List of values to compare.</param>
            <returns>Returns true if one of list values matches with the specified value.</returns>
        </member>
        <member name="M:qckdev.Extensions.Clear(System.Text.StringBuilder)">
            <summary>
            Clears string builder content.
            </summary>
            <param name="value">
            The <see cref="T:System.Text.StringBuilder"/> to clear.
            </param>
        </member>
        <member name="T:qckdev.Key">
            <summary>
            Provides a multi-field class which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interfaces. 
            This class can be uses in <see cref="T:System.Collections.Generic.IDictionary`2"/> for TKey identification.
            </summary>
        </member>
        <member name="M:qckdev.Key.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:qckdev.Key"/> class. <see cref="P:qckdev.Key.IgnoreCase"/> is activated for <see cref="T:System.String"/> values.
            </summary>
            <param name="keys">The <see cref="T:System.Array"/> whose elements are copied to the <see cref="T:qckdev.Key"/>.</param>
        </member>
        <member name="M:qckdev.Key.#ctor(System.Object[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:qckdev.Key"/> class.
            </summary>
            <param name="keys">The <see cref="T:System.Array"/> whose elements are copied to the <see cref="T:qckdev.Key"/>.</param>
            <param name="ignoreCase">
            A <see cref="T:System.Boolean"/> indicating a case-sensitive or insensitive comparison in <see cref="T:System.String"/> values (true indicates a case-insensitive comparison).
            </param>
        </member>
        <member name="P:qckdev.Key.IgnoreCase">
            <summary>
            A <see cref="T:System.Boolean"/> indicating a case-sensitive or insensitive comparison in <see cref="T:System.String"/> values (true indicates a case-insensitive comparison).
            </summary>
        </member>
        <member name="P:qckdev.Key.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is equal to or greater than System.Collections.ArrayList.Count.</exception>
        </member>
        <member name="M:qckdev.Key.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:qckdev.Key"/>.</returns>
        </member>
        <member name="M:qckdev.Key.Equals(qckdev.Key)">
            <summary>
            Determines whether the specified <see cref="T:qckdev.Key"/> is equal to the current <see cref="T:qckdev.Key"/>
            </summary>
            <param name="other">The <see cref="T:qckdev.Key"/> to compare with the current <see cref="T:qckdev.Key"/>.</param>
            <returns>true if the specified <see cref="T:qckdev.Key"/> is equal to the current <see cref="T:qckdev.Key"/>; otherwise, false.</returns>
        </member>
        <member name="M:qckdev.Key.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Key"/>
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:qckdev.Key"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Key"/>; otherwise, false.</returns>
        </member>
        <member name="M:qckdev.Key.ItemEquals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
            </summary>
            <param name="item1">The first <see cref="T:System.Object"/> to compare.</param>
            <param name="item2">The second <see cref="T:System.Object"/> to compare.</param>
            <returns>true if the instances are equal; otherwise false.</returns>
            <remarks>
            If <paramref name="item1"/> and <paramref name="item2"/> are <see cref="T:System.String"/>, 
            it uses <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)"/> with <see cref="P:qckdev.Key.IgnoreCase"/> parameter.
            </remarks>
        </member>
        <member name="M:qckdev.Key.ToArray">
            <summary>
            Returns an <see cref="T:System.Array"/> containing copies of the elements of the current object.
            </summary>
            <returns>A <see cref="T:System.Array"/> containing copies of the elements of the current object.</returns>
        </member>
        <member name="M:qckdev.Key.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:qckdev.Key.op_Equality(qckdev.Key,qckdev.Key)">
            <summary>
            Determines whether the specified <see cref="T:qckdev.Key"/> instances are considered equal.
            </summary>
            <param name="val1">The first <see cref="T:qckdev.Key"/> to compare.</param>
            <param name="val2">The second <see cref="T:qckdev.Key"/> to compare.</param>
            <returns>true if the instances are equal; otherwise false.</returns>
        </member>
        <member name="M:qckdev.Key.op_Inequality(qckdev.Key,qckdev.Key)">
            <summary>
            Determines whether the specified <see cref="T:qckdev.Key"/> instances are considered different.
            </summary>
            <param name="val1">The first <see cref="T:qckdev.Key"/> to compare.</param>
            <param name="val2">The second <see cref="T:qckdev.Key"/> to compare.</param>
            <returns>true if the instances are different; otherwise false.</returns>
        </member>
        <member name="T:qckdev.Linq.Collection">
            <summary>
            Provides a set of static methods for querying objects that implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Collection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the end of the <paramref name="collection"/>.
            </summary>
            <param name="collection"></param>
            <param name="e">
            The ICollection whose elements should be added to the end of the <paramref name="collection"/>. 
            The collection itself cannot be null, but it can contain elements that are null.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="collection"/> is read-only 
            -or- 
            The <paramref name="collection"/> has a fixed size.</exception>
        </member>
        <member name="M:qckdev.Linq.Collection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.Generic.IList`1"/> to the end of the <paramref name="collection"/>.
            </summary>
            <param name="collection"></param>
            <param name="l">
            The ICollection whose elements should be added to the end of the <paramref name="collection"/>. 
            The collection itself cannot be null, but it can contain elements that are null.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="l"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="collection"/> is read-only 
            -or- 
            The <paramref name="collection"/> has a fixed size.</exception>
        </member>
        <member name="M:qckdev.Linq.Collection.IndexOf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="collection">An <see cref="T:System.Collections.Generic.ICollection`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="T:qckdev.Linq.Dictionary">
            <summary>
            Provides a set of static methods for querying objects that implement <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Dictionary.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key or null if it does not exist in the dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key whose value to get.</param>
            <exception cref="T:System.ArgumentException">key is null.</exception>
        </member>
        <member name="M:qckdev.Linq.Dictionary.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
            Gets the value associated with the specified key or null if it does not exist in the dictionary. Only for structs.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The <typeparamref name="TValue"/> returned when the <typeparamref name="TKey"/> was not found.</param>
            <exception cref="T:System.ArgumentException">key is null.</exception>
        </member>
        <member name="M:qckdev.Linq.Dictionary.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key or <paramref name="defaultValue"/> if it does not exist in the dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The <typeparamref name="TValue"/> returned when the <typeparamref name="TKey"/> was not found.</param>
            <exception cref="T:System.ArgumentException">key is null.</exception>
        </member>
        <member name="M:qckdev.Linq.Dictionary.AddIfNotExists``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not exists yet.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary"></param>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <returns>Returns true if the key did not exist yet; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="T:qckdev.Linq.Enumerable">
            <summary>
            Provides a set of static methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Enumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. 
            A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            that has elements of type <typeparamref name="TResult"/> 
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
            <typeparamref name="TOuter"/> or 
            <typeparamref name="TInner"/> or 
            <paramref name="outerKeySelector"/> or 
            <paramref name="innerKeySelector"/> or 
            <paramref name="resultSelector"/> is null.
            </exception>
        </member>
        <member name="M:qckdev.Linq.Enumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. 
            A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to hash and compare keys.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            that has elements of type <typeparamref name="TResult"/> 
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.
            <typeparamref name="TOuter"/> or 
            <typeparamref name="TInner"/> or 
            <paramref name="outerKeySelector"/> or 
            <paramref name="innerKeySelector"/> or 
            <paramref name="resultSelector"/> is null.
            </exception>
        </member>
        <member name="M:qckdev.Linq.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="enumerable">Elements where apply the action.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">action is null.</exception>
            <exception cref="T:System.InvalidOperationException">An element in the collection has been modified.</exception>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionOperatorType">
            <summary>
            Defines the operation type to be applied in an <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.None">
            <summary>The <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>there is not any operation.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Equals">
            <summary>Represents an equality comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.NotEqual">
            <summary>Represents an inequality comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.GreaterThan">
            <summary>A node that represents a "greater than" numeric comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.GreaterThanOrEqual">
            <summary>A node that represents a "greater than or equal" numeric comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.LessThan">
            <summary>A node that represents a "less than" numeric comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.LessThanOrEqual">
            <summary>A node that represents a "less than or equal" numeric comparison.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Like">
            <summary>Represents an string comparison agains a pattern.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.In">
            <summary>
            Represents an equality comparison for a collection of elements.
            See also <seealso cref="F:qckdev.Linq.Expressions.ExpressionNodeType.ListType"/>.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.And">
            <summary>A node that represents a short-circuiting conditional AND operation.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Or">
            <summary>A node that represents a short-circuiting conditional OR operation.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Not">
            <summary>A node that represents a bitwise complement operation.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Add">
            <summary>A node that represents arithmetic addition.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Substract">
            <summary>A node that represents arithmetic subtraction.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Multiply">
            <summary>A node that represents arithmetic multiplication.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Divide">
            <summary>A node that represents arithmetic division.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Modulo">
            <summary>A node that represents an arithmetic remainder operation.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionOperatorType.Power">
            <summary>A node that represents raising a number to a power.</summary>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionNodeType">
            <summary>
            Defines the expression type that represents an <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.Default">
            <summary>Unknown <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/>.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.ListType">
            <summary>A node that represents a list of elements in <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.In"/> operations.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.StringType">
            <summary>A node that represents a <see cref="T:System.String"/> constant.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.DateType">
            <summary>A node that represents a <see cref="T:System.DateTime"/> constant.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.PropertyType">
            <summary>A node that represents a <see cref="T:System.Reflection.PropertyInfo"/> constant.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.UnknownType">
            <summary>A node that represents a contant whose value type could not be defined.</summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.RelationalOperator">
            <summary>
            A node that represents a relational operator. 
            For example <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.Equals"/>, <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.GreaterThan"/>, ...
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.LogicalOperator">
            <summary>
            A node that represents a relational operator. 
            For example <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.And"/>, <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.Not"/>, ...
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionNodeType.ArithmeticOperator">
            <summary>
            A node that represents a relational operator. 
            For example <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.Add"/>, <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.Modulo"/>, ...
            </summary>
        </member>
        <member name="T:qckdev.Linq.Expressions.CharType">
            <summary>
            Sets the char type.
            </summary>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionBuilder">
            <summary>
            Provides an <see cref="T:System.Linq.Expressions.Expression"/> generator from <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> items.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder.PropertyEqual``1(System.String,System.Type,System.Object)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression"/> that represents an equality comparison between a <see cref="T:System.Reflection.PropertyInfo"/> and a constant.
            </summary>
            <typeparam name="T">The object <see cref="T:System.Type"/> that contains the <paramref name="propertyName"/></typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder.PropertyValue``2(System.String)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression"/> that represents a <see cref="T:System.Reflection.PropertyInfo"/>. 
            This expression can be compiled and is faster than reflection access.
            </summary>
            <typeparam name="T">The object <see cref="T:System.Type"/> that contains the <paramref name="propertyName"/></typeparam>
            <typeparam name="TResult">The <see cref="T:System.Type"/> returned for the <see cref="T:System.Linq.Expressions.Expression"/>.</typeparam>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionBuilder`2">
            <summary>
            Provides an <see cref="T:System.Linq.Expressions.Expression"/> generator from <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> items.
            </summary>
            <typeparam name="T">The object type defined in the <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.</typeparam>
            <typeparam name="TResult">The <see cref="T:System.Type"/> returned for the <see cref="T:System.Linq.Expressions.Expression"/>.</typeparam>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.#ctor">
            <summary>
            Creates a new instance of <see cref="T:qckdev.Linq.Expressions.ExpressionBuilder`2"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionBuilder`2.ItemType">
            <summary>
            Gets the object type defined in the <see cref="T:qckdev.Linq.Expressions.ExpressionBuilder`2"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionBuilder`2.ParameterExpression">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.ParameterExpression"/> used for Lambda expressions.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionBuilder`2.Properties">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with cached <see cref="T:System.Reflection.PropertyInfo"/> for faster access.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildExpression(qckdev.Linq.Expressions.ExpressionTree)">
            <summary>
            Converts a <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> to be converted.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> result.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/> is not implemented.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildProperty(System.String)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a property given the name of the property.
            </summary>
            <param name="propertyName">The name of a property.</param>
            <returns>
            A <see cref="T:System.Linq.Expressions.MemberExpression"/> that has the <see cref="P:System.Linq.Expressions.MemberExpression.Member"/>
            property set to the <see cref="T:System.Reflection.PropertyInfo"/> that represents the property
            denoted by <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.Lambda(System.Linq.Expressions.Expression)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> where the delegate type is known at compile time.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.Create(qckdev.Linq.Expressions.ExpressionTree)">
            <summary>
            Converts a <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> to be converted.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> lambda expression.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/> is not implemented.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.Create(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> pattern to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:System.String"/> pattern.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> lambda expression.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/> is not implemented.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildExpression(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Converts a <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to be converted.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> result.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/> is not implemented.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildRelationalExpression(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Converts from <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/> 
            when the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> is a relational operator (==, !=, =, LIKE, &gt;, &lt;, &gt;=, &lt;=, ...).
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildArithmeticExpression(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Converts from <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/> 
            when the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> is an arithmetic operator (+, -, *, /, ^, %, ...).
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildLogicalOperator(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Converts from <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/> 
            when the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> is a logical operator (AND, OR, NOT, ...).
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildValueExpression(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Converts from <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/> 
            when the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> is a value expression.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.BuildValueExpression(qckdev.Linq.Expressions.ExpressionNode,qckdev.Linq.Expressions.ExpressionNodeType)">
            <summary>
            Converts from <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to <see cref="T:System.Linq.Expressions.Expression"/> 
            when the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> is a value expression.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionBuilder`2.GetMasterOrSlaveExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Returns which of expressions contains the master or slave data <see cref="T:System.Type"/>, according to <paramref name="master"/> parameter.
            </summary>
            <param name="expr1">First expression.</param>
            <param name="expr2">Second expression.</param>
            <param name="master">True to returns the expression that contains the master <see cref="T:System.Type"/>. False to returns the expression that contains the slave <see cref="T:System.Type"/>.</param>
            <returns>The expressions contains the master or slave data <see cref="T:System.Type"/>, according to <paramref name="master"/> parameter.</returns>
            <remarks>
            Master data type is every expression whose type is not <see cref="F:System.Linq.Expressions.ExpressionType.Constant"/>.
            If both expressions are <see cref="T:System.Linq.Expressions.ConstantExpression"/>, the funcion returns different one for each <paramref name="master"/> value.
            </remarks>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionHelper">
            <summary>
            Provides helpful methods for Linq expressions. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.Constant(System.Object,System.Type)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"/> with nullable support.
            </summary>
            <param name="value">Constant value.</param>
            <param name="type">Constant type. Can be a <see cref="T:System.Nullable`1"/> type.</param>
            <returns></returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.ChangeType(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that implements the System.IConvertible interface</param>
            <param name="conversionType">The type of object to return.</param>
            <returns></returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.Concatenate(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression},System.Linq.Expressions.Expression[])">
            <summary>
            Concatenates several <see cref="T:System.Linq.Expressions.Expression"/> elements.
            </summary>
            <param name="function">Function to invoke.</param>
            <param name="expressions">List of <see cref="T:System.Linq.Expressions.Expression"/> to concatenate.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.Concatenate(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Concatenates several <see cref="T:System.Linq.Expressions.Expression"/> elements.
            </summary>
            <param name="function">Function to invoke.</param>
            <param name="expressions">List of <see cref="T:System.Linq.Expressions.Expression"/> to concatenate.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.FormatToSQLFilter(System.String)">
            <summary>
            Replaces '*' and '?' for '%' and '_' excepting when they are preceded by '\' character.
            </summary>
            <param name="value">Value to format.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionHelper.LikeRegex(System.String)">
            <summary>
            Generates a <see cref="T:System.Text.RegularExpressions.Regex"/> from a SQL LIKE format pattern.
            </summary>
            <param name="pattern">Value to format</param>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionNode">
            <summary>
            Represents a part of a <see cref="T:System.String"/> expression in a <see cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.Locked">
            <summary>
            Gets or sets if this nodo cannot be altered during the <see cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/> build (for example parentheses).
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.StartIndex">
            <summary>
            Gets the start index in the <see cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.EndIndex">
            <summary>
            Gets the end index in the <see cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.Operator">
            <summary>
            Gets the <see cref="T:qckdev.Linq.Expressions.ExpressionOperatorType"/> that determinates what kind of operation should be applied to this <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            This value can be <see cref="F:qckdev.Linq.Expressions.ExpressionOperatorType.None"/> when the <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> represents parentheses.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.Type">
            <summary>
            Gets the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeType"/> that determinates the Expression type.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.Nodes">
            <summary>
            Gets the collection of <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> objects assigned to the current node.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.Text">
            <summary>
            Gets the <see cref="T:System.String"/> part of the <see cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNode.FormattedText">
            <summary>
            Gets the final value of the <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> converted during the process or null if it must takes <see cref="P:qckdev.Linq.Expressions.ExpressionNode.Text"/> value.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.GetNodePath">
            <summary>
            Returns an <see cref="T:System.Array"/> with the <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> elements of the node path.
            </summary>
            <returns>An <see cref="T:System.Array"/> with the <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> elements.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.ShouldSerializeNodes">
            <summary>
            Retuns if the element has child nodes. This class is for Serialization.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.Equals(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Determines whether the specified <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>
            </summary>
            <param name="other">The <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> to compare with the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.</param>
            <returns>
            true if the specified <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>; otherwise, false.
            </returns>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionNodeCollection">
            <summary>
            Represents a collection of <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> objects.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionNodeCollection.Owner">
            <summary>
            The parent <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNodeCollection.AddNew">
            <summary>
            Añade y devuelve un nuevo valor de tipo <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> en la colección actual.
            </summary>
            <returns>Un nuevo valor de tipo <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/> añadido a la colección actual.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNodeCollection.AddRange(System.Collections.Generic.IEnumerable{qckdev.Linq.Expressions.ExpressionNode})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeCollection"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeCollection"/>.</param>
            <exception cref="T:System.NullReferenceException">Collection is null.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionNodeCollection.InsertItem(System.Int32,qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Inserts an element into the <see cref="T:qckdev.Linq.Expressions.ExpressionNodeCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionString">
            <summary>
            Provide methods to convert a <see cref="T:System.String"/> expression to <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionString.OperationMap">
            <summary>
            Relación entre los operadores en formato texto y los operadores en formato objeto.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionString.BreakerChars">
            <summary>
            Lista de caracteres que indican que se cambia de elemento durante la lectura.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionString.ScapeChars">
            <summary>
            Lista de caracteres que tienen funcionamiento especial pero, que si vienen dos veces seguidas, se refiere al carácter en sí.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionString.DelimiterChars">
            <summary>
            Relación entre el caracter de apertura y el de cierre.
            </summary>
        </member>
        <member name="F:qckdev.Linq.Expressions.ExpressionString.DelimiterTypes">
            <summary>
            Relación entre el caracter de apertura y el tipo de dato.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.ParseExpressionString(System.String)">
            <summary>
            Recorre todos los caracteres de la cadena y los procesa.
            </summary>
            <param name="value">Cadena de texto.</param>
            <returns>El <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> con los elementos de la cadena.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.ProcessSubstring(qckdev.Linq.Expressions.ExpressionNode,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Procesa el rango específico de la cadena contenida en <see cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/> 
            (accesible desde <seealso cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/>).
            </summary>
            <param name="node">Nodo de trabajo.</param>
            <param name="startIndex">Índice del primer caracter a leer en <see cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/></param>
            <param name="endIndex">Índice del último caracter a leer en <see cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/> o null para leer hasta el final.</param>
            <param name="delimiterOpened">
            Indica si se está buscando dentro de una zona incluida en <see cref="F:qckdev.Linq.Expressions.ExpressionString.DelimiterChars"/>, 
            para no lanzar error de formato si encuentra un carácter de cierre.
            </param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.ProcessChar(qckdev.Linq.Expressions.ExpressionNode,qckdev.Linq.Expressions.CharType@,System.Int32@,System.Boolean)">
            <summary>
            Analiza el caracter en una cadena y lo procesa, pudiendo crear nodos hijos, asignarles un operador o rellenar en <see cref="P:qckdev.Linq.Expressions.ExpressionString.StringBuffer"/>.
            </summary>
            <param name="node">
            Nodo que se está procesando en estos momentos.
            </param>
            <param name="lastCharType">
            Último tipo de caracter leído. 
            Este permite identificar cuándo se ha cambiado de valor a operación u otros, sin tener que separar mediante espacios.
            </param>
            <param name="charIndex">
            Índice del caracter que se está analizando dentro de <paramref name="node"/>
            (<seealso cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/>, <seealso cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/>).
            Si es conveniente, este valor puede ser reemplazado por otro (por ejemplo, al encontrar una apertura de paréntesis, 
            se moverá hasta el paréntesis de cierre.
            </param>
            <param name="delimiterOpened">
            Indica si se está buscando dentro de una zona incluida en <see cref="F:qckdev.Linq.Expressions.ExpressionString.DelimiterChars"/>, 
            para no lanzar error de formato si encuentra un carácter de cierre.
            </param>
            <exception cref="T:System.FormatException">La cadena a procesar es incorrecta.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.AddChildNodeFromOpenCharacter(qckdev.Linq.Expressions.ExpressionNode,System.Int32@)">
            <summary>
            Crea un sub elemento a partir de un caracter de apertura.
            </summary>
            <param name="parentNode">Nodo actual de procesamiento.</param>
            <param name="charIndex">
            Índice del caracter que se está analizando dentro de <paramref name="parentNode"/>
            (<seealso cref="P:qckdev.Linq.Expressions.ExpressionNode.ExpressionTree"/>, <seealso cref="P:qckdev.Linq.Expressions.ExpressionTree.Value"/>).
            Si es conveniente, este valor puede ser reemplazado por otro (por ejemplo, al encontrar una apertura de paréntesis, 
            se moverá hasta el paréntesis de cierre.
            </param>
            <exception cref="T:System.FormatException">La cadena a procesar es incorrecta.</exception>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.CloseNodeFromOpenCharacter(qckdev.Linq.Expressions.ExpressionNode,System.Int32@,System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Recorre el texto en busca hasta que se encuenta el caracter de cierre.
            </summary>
            <param name="node">Nodo actual de procesamiento.</param>
            <param name="charIndex"></param>
            <param name="closeCriteria"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.ProcessBuffer(qckdev.Linq.Expressions.ExpressionNode,System.Int32,System.Boolean)">
            <summary>
            Procesa el texto pendiente en el buffer.
            </summary>
            <param name="parentNode">
            Nodo de procesamiento (sólo lo utilizará si no existe ningún valor en <see cref="P:qckdev.Linq.Expressions.ExpressionString.CurrentNode"/>.
            </param>
            <param name="charIndex">
            Índice del caracter que se está analizando dentro de <paramref name="parentNode"/>
            </param>
            <param name="formattedText">
            Establece si el valor pendiente del buffer debe almacenarse en <see cref="P:qckdev.Linq.Expressions.ExpressionNode.FormattedText"/>.
            Este valor sustituirá al de la propiedad <see cref="P:qckdev.Linq.Expressions.ExpressionNode.Text"/> durante el procesamiento.
            </param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.BuildTree(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> expression to <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> expression to parse.</param>
            <returns>The <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> parsed.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.ApplyParentNode(qckdev.Linq.Expressions.ExpressionNode,qckdev.Linq.Expressions.ExpressionNodeType,qckdev.Linq.Expressions.ExpressionOperatorType)">
            <summary>
            Modifica la expresión del parámetro <paramref name="node"/> añadiendo primero los datos actuales a un nodo inferior.
            </summary>
            <param name="node">Nodo a modificar.</param>
            <param name="parentType">Nuevo tipo</param>
            <param name="parentOperator">Nuevo operador.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.GetCharType(System.String)">
            <summary>
            Devuelve el tipo de elemento almacenado en la cadena <paramref name="value"/>.
            </summary>
            <param name="value">La cadena a ser analizada.</param>
            <remarks>
            Se utiliza para detectar cuándo pasa de valor a operador, o paréntesis u otra cosa.
            </remarks>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.IsValueNode(qckdev.Linq.Expressions.ExpressionNodeType)">
            <summary>
            Devuelve si el tipo de nodo puede contener un valor.
            </summary>
            <param name="nodeType">Tipo de nodo a validar.</param>
            <returns>True si el tipo puede contener un valor, false en caso contrario.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.IsOperatorNode(qckdev.Linq.Expressions.ExpressionNodeType)">
            <summary>
            Devuelve si el tipo de nodo es un operador.
            </summary>
            <param name="nodeType">Tipo de nodo a validar.</param>
            <returns>True si el tipo es un operador, false en caso contrario.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.GetOperatorPriority(qckdev.Linq.Expressions.ExpressionOperatorType)">
            <summary>
            Devuelve la prioridad de cálculo del operador de menor a mayor. 
            Esto permite hacer las multiplicaciones antes que las sumas, las potencias antes que las multiplicaciones, los AND antes que los OR, etc.
            </summary>
            <param name="operator">Operador a validar.</param>
            <returns>La prioridad de cálculo del operador, de menor a mayor.</returns>
            <remarks>
            <seealso href="https://stackoverflow.com/questions/1241142/sql-logic-operator-precedence-and-and-or"/>
            <seealso href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/operator-precedence-transact-sql?view=sql-server-2017"/>
            </remarks>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.GetArithmeticOperator(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Devuelve el operador adjunto a un nodo específico.
            </summary>
            <param name="node">Nodo de búsqueda.</param>
            <returns>El operador adjunto al nodo especificado.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.GetLogicalOperator(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Devuelve el operador adjunto a un nodo específico.
            </summary>
            <param name="node">Nodo de búsqueda.</param>
            <returns>El operador adjunto al nodo especificado.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.GetRelationalOperator(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Devuelve el operador adjunto a un nodo específico.
            </summary>
            <param name="node">Nodo de búsqueda.</param>
            <returns>El operador adjunto al nodo especificado.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.IsArithmeticBranch(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Devuelve un valor que indica si la rama en la que se encuentra el nodo es una rama aritmética.
            </summary>
            <param name="node">Nodo de búsqueda.</param>
            <returns>True si la rama es aritmética, false en caso contrario.</returns>
            <remarks>
            Se utiliza para poder diferenciar si el símbolo "-" es porque va a ser un número negativo o una resta.
            </remarks>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.FindNodeForOperator(qckdev.Linq.Expressions.ExpressionNode,qckdev.Linq.Expressions.ExpressionOperatorType,System.Func{qckdev.Linq.Expressions.ExpressionNodeType,System.Boolean},System.Func{qckdev.Linq.Expressions.ExpressionNode,qckdev.Linq.Expressions.ExpressionOperatorType})">
            <summary>
            Devuelve el nodo más próximo a <paramref name="currentNode"/> al que se le pueda asignar la operación especificada.
            </summary>
            <param name="currentNode">Nodo de inicio de búsqueda.</param>
            <param name="operator">Operador que se desea aplicar.</param>
            <param name="isValidNodeFunc">Función que valida los nodos sobre los que puede buscar.</param>
            <param name="getOperatorFunc">Función que devuelve el tipo de operador del nodo durante las búsquedas.</param>
            <returns>El nodo más próximo al que se le pueda asignar la operación especificada.</returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.CollapseTree(qckdev.Linq.Expressions.ExpressionNode@)">
            <summary>
            Elimina todos los nodos que están vacíos (<see cref="F:qckdev.Linq.Expressions.ExpressionNodeType.Default"/>) para dejar el arbol lo más limpio posible.
            </summary>
            <param name="node">Nodo desde el que limpiar.</param>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionString.UploadEndIndexAllLevels(qckdev.Linq.Expressions.ExpressionNode)">
            <summary>
            Calcula el <see cref="P:qckdev.Linq.Expressions.ExpressionNode.EndIndex"/> del elemento y de todos sus elementos hijos que todavía tengan este valor vacío.
            </summary>
            <param name="node">Nodo a revisar.</param>
            <remarks>
            Se utiliza para todos aquellos tipos de elementos que no se sabe el valor de <see cref="P:qckdev.Linq.Expressions.ExpressionNode.EndIndex"/> 
            hasta tenerse todos los nodos hijos.
            </remarks>
        </member>
        <member name="T:qckdev.Linq.Expressions.ExpressionTree">
            <summary>
            Provides an intermediate language between a <see cref="T:System.String"/> expression and an <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionTree.Value">
            <summary>
            Gets or sets the <see cref="T:System.String"/> expression.
            </summary>
        </member>
        <member name="P:qckdev.Linq.Expressions.ExpressionTree.Root">
            <summary>
            Gets or sets the root <see cref="T:qckdev.Linq.Expressions.ExpressionNode"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionTree.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionTree.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionTree.Equals(qckdev.Linq.Expressions.ExpressionTree)">
            <summary>
            Determines whether the specified <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>
            </summary>
            <param name="other">The <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> to compare with the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.</param>
            <returns>
            true if the specified <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:qckdev.Linq.Expressions.ExpressionTree.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:qckdev.Linq.Expressions.ExpressionTree"/>; otherwise, false.
            </returns>
        </member>
        <member name="T:qckdev.Linq.List">
            <summary>
            Provides a set of static methods for querying objects that implement <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:qckdev.Linq.List.AddRange(System.Collections.IList,System.Collections.ICollection)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"/> to the end of the <paramref name="list"/>.
            </summary>
            <param name="list"></param>
            <param name="c">
            The ICollection whose elements should be added to the end of the <paramref name="list"/>. 
            The collection itself cannot be null, but it can contain elements that are null.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="c"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="list"/> is read-only 
            -or- 
            The <paramref name="list"/> has a fixed size.</exception>
        </member>
        <member name="M:qckdev.Linq.List.AddRange(System.Collections.IList,System.Collections.IList)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.IList"/> to the end of the <paramref name="list"/>.
            </summary>
            <param name="list"></param>
            <param name="l">
            The ICollection whose elements should be added to the end of the <paramref name="list"/>. 
            The collection itself cannot be null, but it can contain elements that are null.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="l"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="list"/> is read-only 
            -or- 
            The <paramref name="list"/> has a fixed size.</exception>
        </member>
        <member name="M:qckdev.Linq.List.TryReplace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/> for new one.
            </summary>
            <param name="list"></param>
            <param name="oldValue">The object to replace from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="newValue">The new object.</param>
        </member>
        <member name="M:qckdev.Linq.List.TryRemove``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="list"></param>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.IList`1"/>;
            otherwise, false. This method also returns false if item is not found in the
            original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only </exception>
        </member>
        <member name="M:qckdev.Reflection.PropertyInfoCache.Cache(System.Type)">
            <summary>
            When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type"/>, using the specified binding constraints. Includes all levels for interfaces.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> that represents the component to get properties for.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all properties
            of the current <see cref="T:System.Type"/> that match the specified binding constraints.-or-
            An empty array of type <see cref="T:System.Reflection.PropertyInfo"/>, if the current <see cref="T:System.Type"/>
            does not have properties, or if none of the properties match the binding constraints.
            </returns>
        </member>
        <member name="T:qckdev.Reflection.ReflectionExtensions">
            <summary>
            Defines the extension methods to the <see cref="N:System.Reflection"/> namespace.
            </summary>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetPropertiesFull(System.Type)">
            <summary>
            When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type"/>, using the specified binding constraints. 
            Includes all levels for interfaces.
            </summary>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all properties
            of the current <see cref="T:System.Type"/> that match the specified binding constraints.-or-
            An empty array of type <see cref="T:System.Reflection.PropertyInfo"/>, if the current <see cref="T:System.Type"/>
            does not have properties, or if none of the properties match the binding constraints.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetPropertiesFull(System.Type,System.Reflection.BindingFlags)">
            <summary>
            When overridden in a derived class, searches for the properties of the current System.Type, using the specified binding constraints. 
            Includes all levels for interfaces.
            </summary>
            <param name="type">Type declaration.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null.</param>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all properties
            of the current <see cref="T:System.Type"/> that match the specified binding constraints.-or-
            An empty array of type <see cref="T:System.Reflection.PropertyInfo"/>, if the current <see cref="T:System.Type"/>
            does not have properties, or if none of the properties match the binding constraints.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetCachedProperties(System.Type)">
            <summary>
            When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type"/>, using the specified binding constraints. Includes all levels for interfaces.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> that represents the component to get properties for.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all properties
            of the current <see cref="T:System.Type"/> that match the specified binding constraints.-or-
            An empty array of type <see cref="T:System.Reflection.PropertyInfo"/>, if the current <see cref="T:System.Type"/>
            does not have properties, or if none of the properties match the binding constraints.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.HasOwnValue(System.Type)">
            <summary>
            Returns a value indicating whether the <see cref="T:System.Type"/> is one of the primitive types, a value type or the <see cref="T:System.String"/> type.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to check.</param>
            <returns>
            true if the the <see cref="T:System.Type"/> is one of the primitive types, a value type or the <see cref="T:System.String"/> type; otherwise, false.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>.
            Creates an instance of the type designated by the specified generic type parameter.
            It works with public and non-public constructors.
            </summary>
            <param name="objectType">The type to create.</param >
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetConstructor(System.Type,System.Object[])">
            <summary>
            Searches for a public/non-public instance constructor whose parameters match the types in the specified <paramref name="objectType"/>.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> where find the constructor.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is returned.
            </param>
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the public or non-public instance constructor
            whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            Searches for a public/non-public method whose parameters match the types in the specified <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> where find the constructor.</param>
            <param name="methodName">The string containing the name of the method.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the method to invoke. If args is an empty array or null, the method
            that takes no parameters is returned.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the public or non-public method
            whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionExtensions.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for a public/non-public method whose parameters match the types in the specified <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> where find the constructor.</param>
            <param name="methodName">The string containing the name of the method.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the method to invoke. If args is an empty array or null, the method
            that takes no parameters is returned.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the public or non-public method
            whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
        </member>
        <member name="T:qckdev.Reflection.ReflectionHelper">
            <summary>
            Provides helpful methods for reflection. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.GetHashCode(System.Object[])">
            <summary>
            Serves as a hash function for a object list.
            </summary>
            <param name="values">List of elements for HashCode creation.</param>
            <returns>A hash code for the object list.</returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.GetHashCode(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Serves as a hash function for a object list.
            </summary>
            <param name="values">List of elements for HashCode creation.</param>
            <returns>A hash code for the object list.</returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type designated by the specified generic type parameter.
            It works with public and non-public constructors.
            </summary>
            <param name="objectType">The type to create.</param >
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of the type designated by the specified generic type parameter.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.GetConstructor``1(System.Object[])">
            <summary>
            Searches for a public/non-public instance constructor whose parameters match the types in the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> where find the constructor.</typeparam>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the public instance constructor
            whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.GetConstructor(System.Type,System.Object[])">
            <summary>
            Searches for a public/non-public instance constructor whose parameters match the types in the specified <paramref name="objectType"/>.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> where find the constructor.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is returned.
            </param>
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the public instance constructor
            whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:qckdev.Reflection.ReflectionHelper.GetCallingMethod">
            <summary>
            Returns a <see cref="T:System.Reflection.MethodBase"/> object representing the method that called to the executing method.
            </summary>
        </member>
        <member name="T:qckdev.Shared">
            <summary>
            Provides a set of miscelaneous static (Shared in Visual Basic) methods.
            </summary>
        </member>
    </members>
</doc>
